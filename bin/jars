#!/usr/bin/env php
<?php

define('APP_HOME', dirname(__DIR__));

@include APP_HOME . '/machine.php';
require APP_HOME . '/vendor/oranfry/jars-cli/lib.php';

$command = array_shift($argv);
$rem_argv = [];
$flags = [];

$parameters = [
    'autoload' => (object) ['description' => 'Path to PHP script responsible for setting up autoloading or pre-loading required classes. Only useful for local jars access.', 'short' => 'a'],
    'connection-string' => (object) ['description' => 'A connection string for jars access', 'short' => 'c'],
    'etc-dir' => (object) ['description' => 'Path to look for portal files (default /etc/jars)', 'short' => 'e'],
    'password' => (object) ['description' => 'When no token is specified, allows specifying a password non-interactively', 'short' => 'p'],
    'portal' => (object) ['description' => 'Name of the portal file, from where connection string and username can be loaded'],
    'token' => (object) ['description' => 'A jars access token, to allow access without creating a new token via username / password', 'short' => 't'],
    'username' => (object) ['description' => 'When no token is specified, allows specifying a username non-interactively', 'short' => 'u'],
];

$arguments = array_map(fn ($details) => @$details->multiple ? [] : $details->default ?? null, $parameters);

for ($i = 0; $i < count($argv); $i++) {
    $matches = [];

    foreach ($parameters as $param => $details) {
        $pattern = '--' . str_replace('_', '-', $param) . '(?:=(.*))?';

        if ($short = $details->short ?? null) {
            $pattern = '(?:-' . $short . '|' . $pattern . ')';
        }

        $pattern = '/^' . $pattern . '$/';

        if (preg_match($pattern, $argv[$i], $matches)) {
            $value = $matches[1] ?? @$argv[++$i];

            if (@$details->multiple) {
                $arguments[$param][] = $value;
            } else {
                $arguments[$param] = $value;
            }

            continue 2;
        }
    }

    if (preg_match('/^-([a-zA-Z])$/', $argv[$i], $groups) || preg_match('/^--([a-zA-Z-]+)$/', $argv[$i], $groups)) {
        $flags[] = $groups[1];

        continue;
    }

    $rem_argv[] = $argv[$i];
}

$argv = array_merge([$command], $rem_argv);

$etc_dir = match (isset($arguments['etc-dir'])) {
    true => (strpos($arguments['etc-dir'], '/') !== 0 ? APP_HOME . '/' : null) . $arguments['etc-dir'],
    default => '/etc/jars',
};

if (isset($arguments['portal'])) {
    if (!is_file($portal_file = $etc_dir . '/' . $arguments['portal'] . '.json')) {
        error_log('Could not file portal file for ' . $arguments['portal'], 4);
        usage($command, $parameters);
        exit(1);
    }

    $portal_data = json_decode(file_get_contents($portal_file));

    if (!isset($arguments['username']) && ($username = $portal_data->username ?? null)) {
        $arguments['username'] = $username;
    }

    if (!isset($arguments['connection-string']) && ($connection_string = $portal_data->connection_string ?? null)) {
        $arguments['connection-string'] = $connection_string;
    }

    if (!isset($arguments['autoload']) && ($autoload = $portal_data->autoload ?? null)) {
        $arguments['autoload'] = $autoload;
    }
}

define('FLAGS', $flags);

if (isset($arguments['autoload'])) {
    require $arguments['autoload'];
}

if (defined('CONNECTION_STRING') && isset($arguments['connection-string']) && CONNECTION_STRING !== $arguments['connection-string']) {
    error_log('Multiple conflicting connection strings specified', 4);
}

if (!defined('CONNECTION_STRING') && !isset($arguments['connection-string'])) {
    error_log('Please specify connection-string', 4);
    usage($command, $parameters);
    exit(1);
}

if (!defined('CONNECTION_STRING')) {
    define('CONNECTION_STRING', $arguments['connection-string']);
}

if ($arguments['token']) {
    define('AUTH_TOKEN', $arguments['token']);
} else {
    if (!$arguments['password']) {
        if (!$arguments['username']) {
            $arguments['username'] = readline('Username: ');
        }

        echo "Password: ";
        $arguments['password'] = read_password();
    }

    if (!$arguments['username']) {
        error_log('Could not determine username', 4);
        usage($command, $parameters);
        exit(1);
    }

    define('USERNAME', $arguments['username']);
    define('PASSWORD', $arguments['password']);
}

unset($arguments, $command, $details, $flags, $i, $matches, $param, $parameters, $pattern, $rem_argv, $short);

require APP_HOME . '/vendor/autoload.php';
require APP_HOME . '/vendor/oranfry/subsimple/subsimple.php';
